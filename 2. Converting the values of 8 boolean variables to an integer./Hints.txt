1. 
Abstract parts of the solution:
One Byte consists of 8 bits for example 0 0 0 0 0 0 0 0.
Based on the instruction, the left most bit is representing the highest value and the right most bit the lowest.
Check each bit represented by a boolean variable and update the integer variable accordingly.
You can use the Horner schema to calculate the integer value from the bits, where each bit represents a power of two. eg. 2^0, 2^1, 2^2, ...

Language Constructs needed in a solution or have to be understood:
Stream in and output operators: >> and <<
Assignment Operator =
Integer Literals, Boolean and Integer Datatype and variables
Based on the solution either: 
-if/else-statements with assignment operators |= and +=;
-bitwise binary | operator;
-arithmatic binary + and * operator 

2.
Here is a detailed Algorithm for the solution:
Calculate the integer value by adding up the weighted values of each bit. To do this, use the following formula for each bit based on the power of 2.
The weights are determined by the position of each bit in the byte, with bit7 having the highest weight (128) and bit0 having the lowest weight (1).
This correlates to the power of two so from the lowest to highest bit it is 2^0, 2^1, 2^2, 2^3 ... 2^7. Output the value of integer variable
Alternatively
Use conditional statements (if statements) to check each boolean variable and set the corresponding bit in "intValue" if the boolean is true. You can do this using bitwise operations.
Use conditional statements to check each boolean variable and set the corresponding bit in the integer variable if the boolean is true.
This can be done by checking if the bit is true or false and if its true, bitshift a 1 for the places in the byte so 7 places for the most significant bit and 0 for the least.

3. 
Here is the solution, but you have to bring the statements into the correct order:
    if (bit7) intValue |= 1 << 7;
    if (bit5) intValue |= 1 << 5;
    cout << intValue << endl;
    if (bit0) intValue |= 1;
    if (bit6) intValue |= 1 << 6;
    if (bit3) intValue |= 1 << 3;
    if (bit4) intValue |= 1 << 4;
    if (bit2) intValue |= 1 << 2;
    if (bit1) intValue |= 1 << 1;
    unsigned short intValue = 0;

4.    
Solution
    unsigned short intValue = 0;
    if (bit7) intValue |= 1 << 7;
    if (bit6) intValue |= 1 << 6;
    if (bit5) intValue |= 1 << 5;
    if (bit4) intValue |= 1 << 4;
    if (bit3) intValue |= 1 << 3;
    if (bit2) intValue |= 1 << 2;
    if (bit1) intValue |= 1 << 1;
    if (bit0) intValue |= 1;
    cout << intValue << endl;
Alternatively to the bitshift:
intValue = (bit7 * 128) + (bit6 * 64) + (bit5 * 32) + (bit4 * 16) + (bit3 * 8) + (bit2 * 4) + (bit1 * 2) + (bit0 * 1);
