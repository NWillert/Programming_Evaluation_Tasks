1.
Abstract parts of the solution:
Begin by understanding the mathematical pattern of Pascal's Triangle, where each number is the sum of the two numbers above it.
To generate n rows of Pascal's Triangle, you should create a function that uses nested loops to compute the values in each row based on the binomial coefficients.
Start with the first row (1), then iteratively calculate each subsequent row by adding the values from the previous row.
Print the rows as you calculate them.

The binomial coefficients can be calculated by:
c(n,k) = c(n-1 , k-1) + c(n-1, k)
c(n, 0) = c(n, n) = 1

Language Constructs needed in a solution or have to be understood:
Arithmetic operators: -, ++
Comparison operators: ==,||, <, <=
Stream Output Operator: <<
Integer and String Literals
for Loops and nesting of loops
Functions - with return type void and long integer
Function - Recursion
Function - Passing arguments by value

2.
Here is a detailed Algorithm for the solution:
Create a C++ function named generatePascalsTriangle that takes an integer parameter n.
Initialize a loop from 0 to n-1 to iterate through each row of Pascal's Triangle.
Create another loop to generate the elements within the current row.
Call the function for the binomial coefficient and print the result followed by a space.
Print a newline character to move to the next row when the inner loop finishes.
Repeat steps 4 to 7 for each row, incrementing the row number each time.

The binomial coefficients can be calculated by:
c(n,k) = c(n-1 , k-1) + c(n-1, k)
c(n, 0) = c(n, n) = 1

3.
Here is the solution, but you have to bring the statements into the correct order and add the braces {} at the correct points:
cout << binomialCoefficient(i, j) << " ";
void generatePascalsTriangle(int n)
cout << endl;
long long binomialCoefficient(int n, int k)
for (int i = 0; i < n; i++)
if (k == 0 || k == n)
return binomialCoefficient(n - 1, k - 1) + binomialCoefficient(n - 1, k);
return 1;
for (int j = 0; j <= i; j++)

4.
Solution:
long long binomialCoefficient(int n, int k) {
    if (k == 0 || k == n) {
        return 1;
    }
    return binomialCoefficient(n - 1, k - 1) + binomialCoefficient(n - 1, k);
}
void generatePascalsTriangle(int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j <= i; j++) {
            cout << binomialCoefficient(i, j) << " ";
        }
        cout << endl;
    }
}